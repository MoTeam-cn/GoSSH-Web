name: Release

on:
  push:
    branches: [ main ]
    # ÁßªÈô§Ë∑ØÂæÑÈôêÂà∂ÔºåËÆ©ÊâÄÊúâÊñá‰ª∂ÈÉΩËÉΩËß¶Âèë
    # paths:
    #   - '**.go'
    #   - 'templates/**'
    #   - 'static/**'
    #   - 'Dockerfile'
    #   - 'go.mod'
    #   - 'go.sum'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'ÁâàÊú¨Á±ªÂûã (major/minor/patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      manual_version:
        description: 'ÊâãÂä®ÊåáÂÆöÁâàÊú¨Âè∑ (ÁïôÁ©∫Ëá™Âä®ÁîüÊàê)'
        required: false
        type: string

jobs:
  build:
    if: "contains(github.event.head_commit.message, '[build]') || github.event_name == 'workflow_dispatch'"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate new version
        id: version
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Ëé∑ÂèñÊúÄÊñ∞Ê†áÁ≠æÁâàÊú¨
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.9.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Ëß£ÊûêÁâàÊú¨Âè∑
          VERSION=${LATEST_TAG#v}
          IFS='.' read -ra PARTS <<< "$VERSION"
          
          # Ê£ÄÊü•ÊòØÂê¶ÊòØÊâãÂä®Ëß¶Âèë
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Â¶ÇÊûúÊèê‰æõ‰∫ÜÊâãÂä®ÁâàÊú¨Âè∑ÔºåÂàô‰ΩøÁî®ÂÆÉ
            if [ ! -z "${{ github.event.inputs.manual_version }}" ]; then
              NEW_VERSION="${{ github.event.inputs.manual_version }}"
              echo "‰ΩøÁî®ÊâãÂä®ÊåáÂÆöÁöÑÁâàÊú¨Âè∑: $NEW_VERSION"
            else
              # Âê¶Âàô‰ΩøÁî®ÁâàÊú¨Á±ªÂûãÈÄíÂ¢û
              VERSION_TYPE="${{ github.event.inputs.version_type }}"
              
              MAJOR=${PARTS[0]:-0}
              MINOR=${PARTS[1]:-0}
              PATCH=${PARTS[2]:-0}
              
              case $VERSION_TYPE in
                "major")
                  MAJOR=$((MAJOR + 1))
                  MINOR=0
                  PATCH=0
                  ;;
                "minor")
                  MINOR=$((MINOR + 1))
                  PATCH=0
                  ;;
                *)
                  PATCH=$((PATCH + 1))
                  ;;
              esac
              
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
              echo "Ê†πÊçÆÈÄâÊã©ÁöÑÁâàÊú¨Á±ªÂûã $VERSION_TYPE ÁîüÊàêÊñ∞ÁâàÊú¨: $NEW_VERSION"
            fi
          else
            # Ê≠£Â∏∏ÁöÑËá™Âä®ÈÄíÂ¢ûË°•‰∏ÅÁâàÊú¨
            MAJOR=${PARTS[0]:-0}
            MINOR=${PARTS[1]:-0}
            PATCH=${PARTS[2]:-0}
            PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            echo "Ëá™Âä®ÈÄíÂ¢ûË°•‰∏ÅÁâàÊú¨: $NEW_VERSION"
          fi
          
          echo "ÂΩìÂâçÁâàÊú¨: $VERSION, Êñ∞ÁâàÊú¨: $NEW_VERSION"
          
          # Êõ¥Êñ∞CHANGELOG
          DATE=$(date +"%Y-%m-%d")
          CHANGELOG_CONTENT="# GoSSH-Web ÁâàÊú¨ v$NEW_VERSION ($DATE)\n\n## Êõ¥Êñ∞ÂÜÖÂÆπ\n\n"
          
          # Ëé∑ÂèñÊúÄËøëÊèê‰∫§
          COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"* %s" | grep -v "Merge" || echo "")
          
          # ÂàÜÁ±ªÊèê‰∫§‰ø°ÊÅØ
          FEATURES=$(echo "$COMMITS" | grep "\[feat\]" | sed 's/\[feat\] //' || echo "")
          FIXES=$(echo "$COMMITS" | grep "\[fix\]" | sed 's/\[fix\] //' || echo "")
          DOCS=$(echo "$COMMITS" | grep "\[docs\]" | sed 's/\[docs\] //' || echo "")
          CHORES=$(echo "$COMMITS" | grep "\[chore\]" | sed 's/\[chore\] //' || echo "")
          OTHERS=$(echo "$COMMITS" | grep -v "\[feat\]\|\[fix\]\|\[docs\]\|\[chore\]" || echo "")
          
          # Ê∑ªÂä†Êñ∞ÂäüËÉΩ
          if [ ! -z "$FEATURES" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}### ‚ú® Êñ∞ÂäüËÉΩ\n\n$FEATURES\n\n"
          fi
          
          # Ê∑ªÂä†‰øÆÂ§ç
          if [ ! -z "$FIXES" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}### üêõ ‰øÆÂ§ç\n\n$FIXES\n\n"
          fi
          
          # Ê∑ªÂä†ÊñáÊ°£Êõ¥Êñ∞
          if [ ! -z "$DOCS" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}### üìö ÊñáÊ°£\n\n$DOCS\n\n"
          fi
          
          # Ê∑ªÂä†Áª¥Êä§Êõ¥Êñ∞
          if [ ! -z "$CHORES" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}### üîß Áª¥Êä§\n\n$CHORES\n\n"
          fi
          
          # Ê∑ªÂä†ÂÖ∂‰ªñÊõ¥Êñ∞
          if [ ! -z "$OTHERS" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}### üîÑ ÂÖ∂‰ªñÊõ¥Êñ∞\n\n$OTHERS\n\n"
          fi
          
          # Â¶ÇÊûúÊ≤°ÊúâÊèê‰∫§ÔºåÊ∑ªÂä†ÈªòËÆ§Ê∂àÊÅØ
          if [ -z "$COMMITS" ]; then
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT}* Áª¥Êä§ÊÄßÊõ¥Êñ∞Âíå‰ºòÂåñ\n\n"
          fi
          
          # ËØªÂèñÁé∞ÊúâÁöÑCHANGELOG
          if [ -f "CHANGELOG.md" ]; then
            EXISTING_CHANGELOG=$(cat CHANGELOG.md)
          else
            EXISTING_CHANGELOG=""
          fi
          
          # ÂêàÂπ∂Êñ∞ÊóßCHANGELOG
          echo -e "$CHANGELOG_CONTENT" > CHANGELOG.md
          if [ ! -z "$EXISTING_CHANGELOG" ]; then
            echo -e "\n$EXISTING_CHANGELOG" >> CHANGELOG.md
          fi
          
          # ËÆæÁΩÆGitÂá≠ÊçÆ
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
          
          # Êèê‰∫§Êõ¥Êñ∞ÁöÑCHANGELOG
          git add CHANGELOG.md
          git commit -m "[build] Release v$NEW_VERSION"
          git tag v$NEW_VERSION
          
          # ËæìÂá∫ÁâàÊú¨Âè∑
          echo "NEW_VERSION=v$NEW_VERSION" >> $GITHUB_ENV
          echo "version=v$NEW_VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main
          tags: true

      - name: Build
        run: |
          go mod download
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o gossh-web-linux-amd64
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o gossh-web-windows-amd64.exe
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o gossh-web-darwin-amd64

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/gossh-web:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/gossh-web:${{ env.NEW_VERSION }}
          labels: |
            org.opencontainers.image.title=GoSSH-Web
            org.opencontainers.image.description=Âº∫Â§ßËÄåÁé∞‰ª£ÁöÑWebÁªàÁ´ØËß£ÂÜ≥ÊñπÊ°à
            org.opencontainers.image.version=${{ env.NEW_VERSION }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Read Changelog
        id: changelog
        run: |
          VERSION="${{ env.NEW_VERSION }}"
          CHANGELOG=$(awk -v ver="$VERSION" 'BEGIN{flag=0} $0 ~ "# GoSSH-Web ÁâàÊú¨ "ver{flag=1;next} $0 ~ "# GoSSH-Web ÁâàÊú¨ v"{flag=0} flag{print}' CHANGELOG.md)
          
          echo "changelog<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: |
            ${{ env.changelog }}
            
            Docker image tags:
            - ${{ secrets.DOCKERHUB_USERNAME }}/gossh-web:latest
            - ${{ secrets.DOCKERHUB_USERNAME }}/gossh-web:${{ env.NEW_VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gossh-web-linux-amd64
          asset_name: gossh-web-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gossh-web-windows-amd64.exe
          asset_name: gossh-web-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./gossh-web-darwin-amd64
          asset_name: gossh-web-darwin-amd64
          asset_content_type: application/octet-stream 